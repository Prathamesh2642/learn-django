backend development - backend application development
	admin panel
	orm
	authentication
most popular backend framework- alt - node js,laravel,spring


1.Virtual environment - it is a type of environment which consists of all the modules/libraries required for a particular project
	
	virtualenv "envname"  	-"envname" folder created
	cd "envname"
	cd Scripts
	activate

	cd ..
	cd ..

2.Django start
	pip install django
	django.__version__
	django-admin startproject "projectname"

after creation of the projectfile, from now we will be using manage.py in the project folder for further project management instead of django-admin

__init__.py - reading the folder structure : import and export of file
asgi - asynchrounous gateway interface 
wsgi - web server gateway interface
urls - mapping urls - routing
settings- project settings


creating first app in django
in the core folder

python manage.py startapp home - creates new directory home with 				 following files

__init__.py - reading and managing all the files in the directory
admin.py 	
apps.py
models.py - managing database related stuff 
tests.py - project testing stuff
views.py - project logical part - data flow from backend to frontend

in the settings section of core project file in the installed apps section add the apps name in the list to ensure that the  particular app belongs to that project



views - logical part of django app
 two types - class based and function based
we have to return actual jinja or html template from backend server

when we want to send data from backend to the html webpage we use the concept of context

to perform iteration in html code we write that specific code in 
	{% for i in range %}
	{%endfor %}
	
	{% if condition %}
	body
	{%elif condition%}
	body
	{%else%}
	body
	{%endif%}


<a href="contacts-page">Contacts</a> - used to route html pages or connect one page to another

sometimes html code or any type of code is redundant in some of the html webpage document here we can add the redundant code in one of the other files like base.html and the changing code can be given in the tag {% block start%}
    {% endblock%}


Models and Migration:
models
Responsible for database related tasks here we define the schema of the database that our project/app is going to use.
define structure

migration - most important folder.
every time you make any changes to any of the models or database you've to hit this command to register the model to sqlite database which is bydefault for django

python manage.py makemigrations
python manage.py migrate

if 2 or more migration files are dependent on each other and if one of the migration file is deleted whole database collapses. it can be viewed on the dbsqlite viewer if any problem has occured.

when some changes are made to the models file in django, and migrate command is hit, django creates a state of all the models file in the project and matches it with the previous states of the model to check for any changes


Django Shell :
python manage.py shell

insert data into models ~ database 
shell opens a kind of interactive window

student=Student(name="",age="",email="",address="")
student is an object of Student class

student.save() - saves data in db
alternative way
student=Student.objects.create()
Student.objects.create()
 - objects here is a model manager if we use this method then we dont have to call the save() 

alternative way
student_dict={'name':,'age':,'email':}
student.objects.create(**student_dict)

student - prints the number of instances in that instance of class

to get the data from the db 
classname.objects.all() : returns a list of all the object instances in that db
classname.objects.all()[index].field - retrieves value 

normally while printing classname.objects.all() it returns the object 
which is unreadable to counter that we can override the string method 
with this way in the model class.
    def __str__(self) -> str:
        return self.name


we can print id of the object using {classname.id}

we can get particular value in the db using id which acts as a primary key using get()

classname.objects.get(columnname=value) 
if value does not exist this will return an exception
 
to counter that
classname.objects.filter(columnname=value) can be used in this case it will return a empty queryset
 



we cannot directly run any python file in django directly to check for functionality of the function because every file in django is binded, so to perform the operation we can use django shell to check for our logic correctness.


CRUD operations :- 
Create Read Update Delete

CREATE:- 

cars=Car()
cars.name=""
cars.speed=10
cars.save()

student=Student(name="",age="",email="",address="")
student is an object of Student class

student.save() - saves data in db
alternative way
student=Student.objects.create()
Student.objects.create()
 - objects here is a model manager if we use this method then we dont have to call the save() 

alternative way
student_dict={'name':,'age':,'email':}
student.objects.create(**student_dict)


READ 

to get the data from the db 
classname.objects.all() : returns a list of all the object instances in that db
classname.objects.all()[index].field - retrieves value 

normally while printing classname.objects.all() it returns the object 
which is unreadable to counter that we can override the string method 
with this way in the model class.
    def __str__(self) -> str:
        return self.name


we can print id of the object using {classname.id}

we can get particular value in the db using id which acts as a primary key using get()

classname.objects.get(columnname=value) 
if value does not exist this will return an exception
 
to counter that
classname.objects.filter(columnname=value) can be used in this case it will return a empty queryset
 


UPDATE:-
classname.objects.filter(col=val).update(col=newval)
we cannot use the get() method for updation instead we will use filter() method


DELETE:-
cars.objects.get(id=2).delete() - delete id 2
cars.objects.filter(id=1).delete() - delete id 1
cars.objects.all().delete() - deletes everything




-----------------------------------------------------------------------
While creating new app
steps:-
models	1.Create models file to define the structure of database
		class receipe(models.Model):
			structure
			makemigration 
			migrate
settings2.Define the external app in settings.py 
		this is present in the main project directory
Views -	3.Define the the receipes function here which is return by the 		backend. this returns the html file using render 
urls	4.Add this app in the urls section to assign urls the 			receipes.html webpage,also import vege app in the url section.
	5. we can inherit html code else we can write our own
	6.the class(in html webpage) will be of post method as it is 	sending data from form to the app.
	backend -> Frontend -- send via context in views.py
	frontend-> Backend -- (Post method) data from form to backend 








bootstrap- class="container mt-5"
	   class="col-6 mx-auto"

templates is an inbuilt directory of django hence it can be automatically read by django 

in django we can integrate html css and js at a time 

apps of django are reusable - 

booting up server 
python manage.py runserver ~ python manage.py runserver 0.0.0.0:5000 - run on custom server ~ 127.0.0.0:8000 - 0.0.0.0:8000 = localhost

spotify udemy instagram


To revise:
	Python OOP
	Html & Css
	Bootstrap
